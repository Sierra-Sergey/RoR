Задание 0. Внимательно изучить https://github.com/rubocop/ruby-style-guide
Пересмотреть свой код из первой домашки, отрефакторить его, если что найдете и учесть в текущей.

Задание 1. Есть массив [621, 445, 147, 159, 430, 222, 482, 44, 194, 522, 652, 494, 14, 126, 532, 387, 441, 471, 337, 446, 18, 36, 202, 574, 556, 458, 16, 139, 222, 220, 107, 82, 264, 366, 501, 319, 314, 430, 55, 336] , сохранить массив в переменную и проделать с ней следующее (должен выводиться результат, но сам массив не менять):
– узнать количество элементов в массиве;
– перевернуть массив;
– найти наибольшее число;
– найти наименьшее число;
– отсортировать от меньшего к большему;
– отсортировать от большего к меньшему;
– удалить все нечетные числа;
– оставить только те числа, которые без остатка делятся на 3;
– удалить из массива числа, которые повторяются (то есть, нужно вывести массив, в котором нет повторов);
– разделить каждый элемент на 10, в результате элементы не должны быть округлены до целого;
– получить новый массив, который бы содержал в себе те буквы английского алфавита, порядковый номер которых есть в нашем массиве;
– поменять местами минимальный и максимальный элементы массива;
– найти элементы, которые находятся перед минимальным числом в массиве;
– необходимо найти три наименьших элемента.

В том же репозитории, что и в первой домашке (RubyHW) создать папку HW2
Первое задание поместить в файл task1.rb. Первой строкой должно идти присвоение массива выше к переменной array. Каждая новая операция с новой строки. Опционально попробуйте сделать все задачки в одну строку.

Задание 2. Тамагочи (те, кому за 30, вспомнят:D)
Необходимо написать программу-тамагочи (https://ru.wikipedia.org/wiki/%D0%A2%D0%B0%D0%BC%D0%B0%D0%B3%D0%BE%D1%87%D0%B8 ). Вы должны создать класс Pet. У каждого питомца должно быть имя, задаваемое при создании. Должно быть название животного (Собачка, Кошка, Попугай или ...), жизни, настроение, показатель голода, сна, настроения + два показателя на своё усмотрение. Должен быть закрытый метод (под private), который бы эмулировал прохождение 1 дня (или часа, или нескольких часов), когда бы некоторые показатели менялись, — например питомец становился более голодным, менее выспавшемся (на случайную величину в пределах заданных) и т.д.
Должно быть 10-20 методов, которые позволяли бы совершать с животным определенные действия, например, "покормить", "положить спать", "поиграть". Каждое из 	этих действий должно менять один или несколько показателей животного, а так же вызывать закрытый метод прохождения времени. Например, мы можем покормить нашего питомца, но при этом пройдет определенное кол-во времени. Должен быть метод, позволяющий просто понаблюдать за питомцев, — в это время может произойти какое то случайное событие. При неправильном уходе питомец может умереть, разозлиться и съесть вас (если оно плотоядное) или убежать.
Необходимо создать простенькую менюшку, чтобы с питомцем можно было поиграть с консоли. Также должен быть метод help, который бы позволял вывести все команды для питомца и описания к ним. В общем, нужно придумать хороший UX.

* простой пример питомца-Дракона: https://www.opennet.ru/docs/RUS/ruby_learn/Chapter09.html (дочитайте эту книгу до конца) ; для создания меню можно использовать until command == 'exit' … end и case с командами для питомца внутри;

В папочку с проектом положите файл readme.md, где напишите инструкцию по запуску вашей программы. Познакомьтесь с синтаксисом md.
Приветствуется любая творческая реализация удовлетворяющая условиям задачи.
